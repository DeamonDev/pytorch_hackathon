# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/Zero-shot Classification of RSS Feeds.ipynb (unless otherwise specified).

__all__ = ['get_feed_df', 'topic_strings', 'get_zero_shot_classification_results',
           'get_zero_shot_classification_results_df']

# Cell
from operator import itemgetter

import numpy as np
import tqdm
import bs4
import feedparser
import seaborn as sns
import pandas as pd


import torch
from pytorch_hackathon import rss_feeds

# Cell
def get_feed_df(feed_urls):
    feeds = [
        (feed_url, feedparser.parse(feed_url))
        for feed_url in tqdm.tqdm(feed_urls)
    ]
    return pd.concat(
        [
            add_field(get_feed_article_df(feed), 'feed', feed_url)
            for (feed_url, feed) in feeds
            if len(feed['entries']) > 0
        ]
    )

# Cell
topic_strings = [
    'deep learning',
    'natural language processing',
    'computer vision',
    'statistics',
    'business intelligence',
    'visualization',
    'industry',
    'implementation',
    'software engineering',
    'reddit question',
    'science',
    'cloud computing',
    'deployment',
    'business'
]

# Cell

def get_zero_shot_classification_results(zsl_clf, text, topic_strings, max_length=128, sort=True):
    text_length = len(text.split())
    results = zsl_clf.predict(text, topic_strings=topic_strings, include_labels=True, batch_size=len(topic_strings), max_length=min(max_length, text_length))
    if sort:
        return sorted(results, key=itemgetter(1), reverse=True)
    else:
        return results


def get_zero_shot_classification_results_df(zsl_clf, texts, topic_strings, progbar_wrapper=tqdm.tqdm):
    results_df = pd.DataFrame(np.zeros((len(texts), len(topic_strings))), columns=sorted(topic_strings))
    for i, text in enumerate(progbar_wrapper(texts)):
        results = get_zero_shot_classification_results(zsl_clf, text, topic_strings)
        results_df.iloc[i] = pd.Series(dict(sorted(results, key=itemgetter(0))))
    return results_df